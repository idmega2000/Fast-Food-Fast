{
  "swagger": "2.0",
  "info": {
    "description": ". Fast-Food-Fast is a food delivery service app.Fast-Food-FAst at [https://github.com/idmega2000/Fast-Food-Fast/](https://github.com/idmega2000/Fast-Food-Fast/)",
    "version": "1.0.0",
    "title": "Fast-Food-Fast",
    "contact": {
      "email": "idmega2000@gmail.com"
    }
  },
  "host": "fast-food-fast-idris.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "auth",
      "description": "Everything about user auth"
    },
    {
      "name": "menu",
      "description": "Operations about menu"
    },
    {
      "name": "orders",
      "description": "Operations about orders"
    },
    {
      "name": "users",
      "description": "Operations about user"
    },
    {
      "name": "status",
      "description": "Status History"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Add a new user",
        "description": "this endpoint add a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user data that we need to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userSignup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Successfully",
            "schema": {
              "$ref": "#/definitions/userSignupRes"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "wrong Password"
          },
          "409": {
            "description": "Email Exist"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login a user",
        "description": "This Endpoint login a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data credentials to login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userSignup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login Successful",
            "schema": {
              "$ref": "#/definitions/userLoginRes"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "invalid login details"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/menu": {
      "post": {
        "tags": [
          "menu"
        ],
        "summary": "Post a menu",
        "description": "This endpoints add a menu to the menu list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the menu data that we want to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postMenu"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Successfully",
            "schema": {
              "$ref": "#/definitions/getMenu"
            }
          },
          "400": {
            "description": "Bad Request(syntax)"
          },
          "401": {
            "description": "invalid token or unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Get all menu list",
        "description": "This Api get all the menu",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/getMenu"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "You need admin priviledge"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Add an order",
        "description": "This Api endpoint post an order ",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the post order data that we want to send",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/postOrderRes"
            }
          },
          "400": {
            "description": "Bad Request(syntax)"
          },
          "401": {
            "description": "invalid token or unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get all orders list",
        "description": "This Api get all the orders",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/getOrderRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "You need admin priviledge"
          }
        }
      },
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Edit status of an order",
        "description": "this Api endpoint update the status of an Order",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order Id- id to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated order object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putAOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/postOrderRes"
            }
          },
          "400": {
            "description": "Bad request Parameters"
          },
          "422": {
            "description": "Bad Id input- User not found"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get a specific order",
        "description": "This Api endpoint get a single order specified by the order id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/postOrderRes"
            }
          },
          "400": {
            "description": "Bad Request(syntax)"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/users/{userId}/orders": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all order of a specific user",
        "description": "This Api endpoint get a single user orders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/postOrderRes"
            }
          },
          "400": {
            "description": "Bad Request(syntax)"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/status/{statusType}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get all order history of a particular status",
        "description": "This Api endpoint get all history of a status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "status type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/postOrderRes"
            }
          },
          "400": {
            "description": "Bad Request(syntax)"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "definitions": {
    "userSignup": {
      "type": "object",
      "required": [
        "userEmail",
        "userPassword"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "idmega2000@gmail.com"
        },
        "userPassword": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "userSignupRes": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "Success"
        },
        "message": {
          "type": "string",
          "example": "Created"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ"
        }
      }
    },
    "userLoginRes": {
      "type": "object",
      "required": [
        "userEmail",
        "userPassword"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "message": {
          "type": "string",
          "example": "Login Successful"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ"
        }
      }
    },
    "postMenu": {
      "type": "object",
      "required": [
        "menuName",
        "menuPrice",
        "menuCategory",
        "menuImage"
      ],
      "properties": {
        "menuName": {
          "type": "string",
          "example": "Rice and Dodo"
        },
        "menuPrice": {
          "type": "integer",
          "example": "1000"
        },
        "menuCategory": {
          "type": "string",
          "example": "African"
        },
        "menuImage": {
          "type": "string",
          "example": "www.gogleImage.com/hdjjjdlk"
        }
      }
    },
    "getMenu": {
      "type": "object",
      "required": [
        "menuId",
        "menuName",
        "menuPrice",
        "menuCategory",
        "menuImage"
      ],
      "properties": {
        "menuid": {
          "type": "integer",
          "example": 1
        },
        "menuName": {
          "type": "string",
          "example": "Rice and Dodo"
        },
        "menuPrice": {
          "type": "integer",
          "example": "1000"
        },
        "menuCategory": {
          "type": "string",
          "example": "African"
        },
        "menuImage": {
          "type": "string",
          "example": "www.gogleImage.com/hdjjjdlk"
        }
      }
    },
    "postOrder": {
      "type": "object",
      "required": [
        "orderAddress",
        "orderPhone",
        "menuCart"
      ],
      "properties": {
        "orderAddress": {
          "type": "string",
          "example": "23, ikotun road, Idimu, lagos"
        },
        "orderPhone": {
          "type": "integer",
          "example": "08031111111"
        },
        "menuCart": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "menuId": {
                "type": "string",
                "example": 2
              },
              "quantity": {
                "type": "integer",
                "example": 3
              }
            }
          }
        }
      }
    },
    "postOrderRes": {
      "type": "object",
      "required": [
        "orderAddress",
        "orderPhone",
        "menuCart"
      ],
      "properties": {
        "orderId": {
          "type": "integer",
          "example": 5
        },
        "orderAddress": {
          "type": "string",
          "example": "23, ikotun road, Idimu, lagos"
        },
        "orderPhone": {
          "type": "integer",
          "example": "08031111111"
        },
        "menuCart": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "menuId": {
                "type": "string",
                "example": 2
              },
              "menu_name": {
                "type": "string",
                "example": "rice and dodo"
              },
              "quantity": {
                "type": "integer",
                "example": 3
              },
              "a_menu_price": {
                "type": "integer",
                "example": 500
              },
              "all_menu_price": {
                "type": "integer",
                "example": 1500
              }
            }
          }
        },
        "order_total": {
          "type": "integer",
          "example": 1500
        },
        "order_date": {
          "type": "string",
          "example": "24/02/2014"
        }
      }
    },
    "getOrderRes": {
      "type": "object",
      "required": [
        "orderAddress",
        "orderPhone",
        "menuCart"
      ],
      "properties": {
        "orderId": {
          "type": "integer",
          "example": 5
        },
        "orderAddress": {
          "type": "string",
          "example": "23, ikotun road, Idimu, lagos"
        },
        "orderPhone": {
          "type": "integer",
          "example": "08031111111"
        },
        "menuCart": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "menuId": {
                "type": "string",
                "example": 2
              },
              "menu_name": {
                "type": "string",
                "example": "rice and dodo"
              },
              "quantity": {
                "type": "integer",
                "example": 3
              },
              "a_menu_price": {
                "type": "integer",
                "example": 500
              },
              "all_menu_price": {
                "type": "integer",
                "example": 1500
              }
            }
          }
        },
        "order_total": {
          "type": "integer",
          "example": 1500
        },
        "order_date": {
          "type": "string",
          "example": "24/02/2014"
        }
      }
    },
    "putAOrder": {
      "type": "object",
      "required": [
        "statusType"
      ],
      "properties": {
        "statusType": {
          "type": "string",
          "example": "processing"
        }
      }
    }
  }
}